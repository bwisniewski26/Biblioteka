@using Microsoft.EntityFrameworkCore
@using ProjektZaliczeniowyPR3.Components

@inject NavigationManager Navigator

<h2>Wypożyczone książki</h2>

@if (ifConnectionSuccessful)
{
    <div class = "table">
        <table>
            <thead>
                <th>Tytuł</th>
                <th>Autor</th>
                <th>Opis</th>
                <th>Zwróć książkę</th>
            </thead>
            <tbody>
                @if (_books is not null)
                {
                    @foreach (var book in _books)
                    {
                        <tr>
                            <td>@book.Title</td>
                            <td>@book.Author</td>
                            <td>@book.Description</td>
                            <td><Button Color="ButtonColor.Secondary" @onclick = "() => ReturnBook(book.Id)"> <Icon Name = "IconName.BookmarkDashFill"></Icon> </Button> </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
}

@code
{
    [Parameter] public int UserId { get; set;} = -1;

    [Parameter] public bool ifConnectionSuccessful { get; set; } = false;

    public List<Book> _books { get; set; } = new();


    protected override void OnInitialized()
    {
        if (ifConnectionSuccessful && UserId != -1)
        {
            Book book = new();
            using (var db = new LibraryContext())
            {
                _books = db.books
                    .Where(book => book.UserId == UserId)
                    .ToList();
            }
        }
    }

    private async void ReturnBookLog(User user)
    {
        if (ifConnectionSuccessful)
        {
            using (var db = new LibraryContext())
            {
            Logs newLog = new();
            newLog.Username = user.Username;
            newLog.IsUserAdmin = user.isAdmin;
            newLog.OperationsType = Logs.OperationType.BookReturn;

            db.logs.Add(newLog);
            await db.SaveChangesAsync();
            }
        }
    }

    public void ReturnBook(int id)
    {
        Book? book = _books.Find(book => book.Id == id);
        if (book is not null)
            book.ReturnBook();
        Navigator.NavigateTo("/refresh/");
    }
}

