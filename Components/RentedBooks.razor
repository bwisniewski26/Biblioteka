@using Microsoft.EntityFrameworkCore
@using ProjektZaliczeniowyPR3.Components

@inject NavigationManager Navigator

<h2>Wypożyczone książki</h2>

@if (ifConnectionSuccessful)
{
    <div class = "table">
        <table>
            <thead>
                <th>Tytuł</th>
                <th>Autor</th>
                <th>Opis</th>
                <th>Zwróć książkę</th>
            </thead>
            <tbody>
                @if (_books is not null)
                {
                    @foreach (var book in _books)
                    {
                        <tr>
                            <td style = "book_title">@book.Title</td>
                            <td>@book.Author</td>
                            <td>@book.Description</td>
                            <td><button @onclick = "() => ReturnBook(book.Id)"> <Icon Name = "IconName.BookmarkDashFill"></Icon> </button> </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
}

@code
{
    [Parameter] public int UserId { get; set;} = -1;

    [Parameter] public bool ifConnectionSuccessful { get; set; } = false;

    public List<Book> _books { get; set; } = new();

    protected override void OnInitialized()
    {
        if (ifConnectionSuccessful && UserId != -1)
        {
            Book book = new();
            using (var db = new LibraryContext())
            {
                _books = db.books
                    .Where(book => book.UserId == UserId)
                    .ToList();
            }
        }
    }

    protected void ReturnBook(int id)
    {
        if (ifConnectionSuccessful)
        {
            using (var db = new LibraryContext())
            {
                Book book = new();
                User user = new();
                    book = db.books
                    .Single(book => book.Id == id);
                    book.isAvailable = true;
                    book.UserId = UserId;
                    db.Entry(book).State = EntityState.Modified;
                    db.SaveChanges();
                    user = db.users
                    .Single(user => user.Id == UserId);

                    user.Books.Remove(book);
                    db.Entry(user).State = EntityState.Modified;
                    db.SaveChanges();

            }
        }
        Navigator.NavigateTo("/refresh/" + UserId.ToString());
    }
}