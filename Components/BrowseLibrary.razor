@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigator

<h3>Zasoby biblioteki</h3>
@if (_connectionSuccessful)
{
@if (!isLoggedIn)
{
<div class = "table">
    <table>
        <thead>
            <th>Tytuł</th>
            <th>Autor</th>
            <th>Dostępność</th>
            <th>Opis</th>
        </thead>
        <tbody>
            @foreach (var book in _books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                        @if (book.isAvailable)
                        {
                            <td>Dostępna</td>
                        }
                        else
                        {
                            <td>Niedostępna</td>
                        }
                    <td>@book.Description</td>
                </tr>
            }

        </tbody>
    </table>
</div>
}
else
{
    <div class = "table">
        <table>
            <thead>
                <th>Tytuł</th>
                <th>Autor</th>
                <th>Opis</th>
                <th>Dostępność</th>
                <th>Wypożycz</th>
            </thead>
            <tbody>
                @foreach (var book in _books)
                {
                    <tr>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>@book.Description</td>
                        @if (book.isAvailable)
                        {
                            <td>Dostępna</td>
                        }
                        else
                        {
                            <td>Niedostępna</td>
                        }
                        <Button Color="ButtonColor.Secondary" id="@book.Id" @onclick = "() => RentBook(book.Id)" disabled = "@(!book.isAvailable)"><Icon Name = "IconName.BookFill"></Icon></Button>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

}


@code {

    bool _connectionSuccessful = false;
    [Parameter] public bool isLoggedIn { get; set; } = false;
    [Parameter] public bool IsAdmin { get; set; } = false;
    [Parameter] public int UserId { get; set; } = -1;
    [Parameter] public bool showDatabaseInfo { get; set; } = true;
    List<Book> _books = new();

    protected override void OnInitialized()
    {
        ConnectionInfo info = new();
        if (info.TryConnection())
        {
            using (var db = new LibraryContext())
            {

                if (db.Database.CanConnect())
                {
                    _connectionSuccessful = true;
                }
                try {
                    _books = db.books
                    .OrderBy(b => b.Title)
                    .ToList();
                }
                catch {
                    try
                    {
                        ExecuteSqlScript();
                    }
                    catch (Exception e)
                    {
                        if (e.Message.Substring(0, 5) != "42P07")
                        {
                            Console.WriteLine(e.Message);
                            return;
                        }
                    }
                }
                
            }
        }
    }

    private static void ExecuteSqlScript()
    {
        using (var context = new LibraryContext())
        {
            context.Database.EnsureCreated();
            var sql = File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(), "script.sql"));
            string[] commands = sql.Split(new string[] { "GO" },
            StringSplitOptions.RemoveEmptyEntries);
            foreach (var command in commands)
            {
                context.Database.ExecuteSqlRaw(command);
            }
        }
    }

    private void GenerateRentLog(User user)
    {
        Logs newLog =  new();
        newLog.Username = user.Username;
        newLog.IsUserAdmin = user.isAdmin;
        newLog.OperationsType = Logs.OperationType.BookRental;
        using (var db = new LibraryContext())
            db.logs.Add(newLog);
    }

    private void RentBook(int Id)
    {
        Book? book = _books.Find(book => book.Id == Id);
        if (book is not null)
            book.BorrowBook(UserId);
        Navigator.NavigateTo("/refresh");
    }
}    

