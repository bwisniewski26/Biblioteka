@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@using ProjektZaliczeniowyPR3.Models
@using ProjektZaliczeniowyPR3.Data;
@using ProjektZaliczeniowyPR3.DatabaseConnection
@inject NavigationManager Navigator
@using static Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions;
<h3>Zasoby biblioteki</h3>
@if (ifConnectionSuccessful)
{
@if (!isLoggedIn)
{
<div class = "table">
    <table>
        <thead>
            <th>Tytuł</th>
            <th>Autor</th>
            <th>Dostępność</th>
            <th>Opis</th>
        </thead>
        <tbody>
            @foreach (var book in _books)
            {
                <tr>
                    <td style = "book_title">@book.Title</td>
                    <td>@book.Author</td>
                        @if (book.isAvailable)
                        {
                            <td>Dostępna</td>
                        }
                        else
                        {
                            <td>Niedostępna</td>
                        }
                    <td>@book.Description</td>
                </tr>
            }

        </tbody>
    </table>
</div>
}
else
{
    <div class = "table">
        <table>
            <thead>
                <th>Tytuł</th>
                <th>Autor</th>
                <th>Opis</th>
                <th>Dostępność</th>
                <th>Wypożycz</th>
            </thead>
            <tbody>
                @foreach (var book in _books)
                {
                    <tr>
                        <td style = "book_title">@book.Title</td>
                        <td>@book.Author</td>
                        <td>@book.Description</td>
                        @if (book.isAvailable)
                        {
                            <td>Dostępna</td>
                        }
                        else
                        {
                            <td>Niedostępna</td>
                        }
                        <Button Color="ButtonColor.Secondary" id="@book.Id" @onclick = "() => RentBook(book.Id)" disabled = "@(!book.isAvailable)"><Icon Name = "IconName.BookFill"></Icon></Button>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

}


@code {

    bool ifConnectionSuccessful = false;
    [Parameter] public bool isLoggedIn { get; set; } = false;
    [Parameter] public bool isAdmin { get; set; } = false;

    [Parameter] public int UserId { get; set; } = -1;

    [Parameter] public bool showDatabaseInfo { get; set; } = true;

    int id = -1;
    List<Book> _books = new();

    protected override void OnInitialized()
    {
        ConnectionInfo info = new();
        if (info.TryConnection())
        {
            using (var db = new LibraryContext())
            {
                if (db.Database.CanConnect())
                {
                    ifConnectionSuccessful = true;
                }
                _books = db.books
                    .OrderBy(b => b.Title)
                    .ToList();
            }
        }
    }

    protected void RentBook(int Id)
    {
        id = Id;
        using (var db = new LibraryContext())
        {
            Book book = new();
            User user = new();
            Logs newLog = new();
            if (ifConnectionSuccessful)
            {

                book = db.books
                .Single(book => book.Id == id);
                book.isAvailable = false;
                book.UserId = UserId;
                db.Entry(book).State = EntityState.Modified;
                db.SaveChanges();

                user = db.users
                .Single(user => user.Id == UserId);

                user.Books.Add(book);

                db.Entry(user).State = EntityState.Modified;
                db.SaveChanges();

                newLog.Username = user.Username;
                newLog.IsUserAdmin = user.isAdmin;
                newLog.OperationsType = Logs.OperationType.BookRental;

                db.logs.Add(newLog);
            }
            
        }
        Navigator.NavigateTo("/refresh/" + UserId.ToString());
    }
}    

