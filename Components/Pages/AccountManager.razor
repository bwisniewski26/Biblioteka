@page "/accountmanager"
@page "/accountmanager/{id}"

@using BlazorBootstrap
@using Microsoft.EntityFrameworkCore
@using ProjektZaliczeniowyPR3.Data
@using ProjektZaliczeniowyPR3.Models
@using ProjektZaliczeniowyPR3.DatabaseConnection

@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigator

<h1>Menedżer kont</h1>

@if (!ifConnectionSuccessful)
{
    <p>Brak połączenia z bazą danych. Sprawdź ustawienia.</p>
}
else
{

    @if (loggedUser is null)
    {
        <p>Ta strona służy wyłącznie do zarządzania kontami przez administratora serwisu. <b/>Zaloguj się i przejdź do tej strony przez panel użytkownika. </p>
    }
    else
    {
        <table>
            <thead>
                <th>Nazwa użytkownika</th>
                <th>Hash hasła</th>
                <th>Administrator?</th>
                <th>Ilość książek</th>
                <th>Usuń konto</th>
            </thead>
            <tbody>
                @if (_users.Count > 0)
                {
                    foreach (var user in _users)
                    {
                        <tr>
                            <td>@user.Username</td>
                            <td>@user.Password</td>
                            @if (user.isAdmin)
                            {
                                <td>Tak</td>
                            }
                            else
                            {
                                <td>Nie</td>
                            }
                            <td>@CalculateBooks(user.Id)</td>
                            <td><Button Color="ButtonColor.Secondary" @onclick = "() => RemoveUser(user.Id)"><Icon Name = "IconName.Trash"></Icon></Button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class = "response">
            <p>@response</p>
        </div>
    }

}

@code
{
    List<User> _users = new();
    [Parameter] public string id { get; set; } = "";

    public bool ifConnectionSuccessful = false;
    User loggedUser = new();

    public int Id = -1;

    string response {get; set;}= "";


    protected override async Task OnAfterRenderAsync(bool ifFirstRender)
    {
        if (ifFirstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<int>("uId");
            Id = result.Success ? result.Value : -1;
            if (Id != -1)
            {
                if (ifConnectionSuccessful)
                {
                    using (var db = new LibraryContext())
                    {
                        loggedUser = db.users
                        .Single(loggedUser => loggedUser.Id == Id);
                    }
                }
                    StateHasChanged();
            }
        }
    } 
    
    protected override void OnInitialized()
    {
        ConnectionInfo info = new();
        ifConnectionSuccessful = info.TryConnection();
        if (ifConnectionSuccessful)
        if (id != "")
        using (var db = new LibraryContext())
        {
            _users = db.users
            .ToList();
        }
        
    }

    protected List<Book> ListBooks()
    {
        List<Book> books = new();
        using (var db = new LibraryContext())
        {
            books = db.books
            .ToList();
        }
        return books;
    }

    

    protected void RemoveUser(int Id)
    {
        if (Id == Convert.ToInt32(id))
        {
            response = "Nie możesz usunąć swojego konta!";
            return;
        }

        ConnectionInfo info = new();
        List<Book> books = ListBooks();
        using (var db = new LibraryContext())
        {
            foreach (var book in books)
            {
                if (book.UserId == Id)
                    book.UserId = -1;
                    db.Entry(book).State = EntityState.Modified;
            }
            

            User user = new();
                user = db.users
                .Single(user => user.Id == Id);

                db.Entry(user).State = EntityState.Deleted;
                db.SaveChanges();        
        }
        Navigator.NavigateTo("/refresh/accountmanager/" + id);
    }
    
    protected int CalculateBooks(int userId)
    {
        int result = 0;
        List<Book> books = ListBooks();
        foreach (var book in books)
        {
            if (book.UserId == userId)
                result++;
        }
        return result;
    }
}