@using BlazorBootstrap
@using Microsoft.EntityFrameworkCore
@using ProjektZaliczeniowyPR3.Data
@using ProjektZaliczeniowyPR3.Models
@using ProjektZaliczeniowyPR3.DatabaseConnection

@inject NavigationManager Navigator
@page "/account"
@page "/account/{userId}"

<PageTitle>Panel użytkownika</PageTitle>
<Toasts class="p-3" Messages="messages" Delay="1000" Placement="ToastsPlacement.TopRight" />

@if (!isLoggedIn)
{
    <h1>Logowanie</h1>
    <div class = "login_prompt">
        <p>Nazwa użytkownika</p> 
        <input @bind = "username">
        <br/>
        <p>Hasło</p>
        <input @bind = "password">
        <br/>
        <button Color="ButtonColor.Primary" @onclick = "LogIn" style = "button_login">Zaloguj się</button>
        <p>Nie masz konta? <a href="/register">Zarejestruj się!</a></p>
        <p>@response</p>
    </div>

}
else
{
    <div class = "logout_button">
        <button Color="ButtonColor.Primary" @onclick = "LogOut" style = "button_login">Wyloguj się</button>
    </div>
    @if (loggedUser is not null)
    {
        <h2>Witaj @loggedUser.Username!</h2>
    }
    @if (isAdmin)
    {
        <p>Dodaj nową książkę</p>
        <br/>
        <p>Tytuł</p>
        <input @bind = "title">
        <br/>
        <p>Autor</p>
        <input @bind = "author">
        <p>Opis</p>
        <input @bind = "desc">
        <button @onclick = "AddBook">Zapisz</button>
        <br/>
        <p><b>Aby wypożyczyć książkę kliknij na ikonę książki obok jej wpisu.</b></p>
        @if (loggedUser is not null)
        {
            <BrowseLibrary isLoggedIn = "true" UserId="@loggedUser.Id" showDatabaseInfo = "false"></BrowseLibrary>
            <p><b>Aby zwrócić książkę kliknij na ikonę obok jej wpisu.</b></p>
            <RentedBooks UserId = "@loggedUser.Id" ifConnectionSuccessful = "@ifConnectionSuccessful"></RentedBooks>
            <p><b>Aby usunąć książkę kliknij na ikonę obok jej wpisu</b></p>
            <RemoveBook UserId = "@loggedUser.Id" ifConnectionSuccessful = "@ifConnectionSuccessful"></RemoveBook>
        }
        <button @onclick = "ClearTable">Usuń wszystkie książki</button>
        <br/>
        <button @onclick = "ClearUsersTable">Usuń wszystkich użytkowników</button>

    }
    else
    {
        <p>Aby wypożyczyć książkę kliknij na ikonę książki obok jej wpisu.</p>
        @if (loggedUser is not null)
        {
           <BrowseLibrary isLoggedIn = "true" UserId="@loggedUser.Id"></BrowseLibrary>
           <p><b>Aby zwrócić książkę kliknij na ikonę obok jej wpisu.</b></p>
           <RentedBooks UserId = "@loggedUser.Id" ifConnectionSuccessful = "@ifConnectionSuccessful"></RentedBooks>
        }
    }
}

<div class = "database_status">
    <p>Status połączenia z bazą danych:</p>
    @if (!ifConnectionSuccessful)
    {
        <p style = "color: red"><b>Brak połączenia z bazą danych!</b></p>
    }
    else
    {
        <p style = "color: green"><b>Połączono pomyślnie</b></p>
    }
</div>


@code {
        List<ToastMessage> messages = new List<ToastMessage>();

        User? loggedUser { get; set; } = new();
        private bool isLoggedIn = false;
        private bool isAdmin = false;
        private bool ifConnectionSuccessful = false;

        [Parameter] public string username { get; set;} = "";
        [Parameter] public string password { get; set;} = "";

        [Parameter] public string userId { get; set; } = "";

        string title = "", author = "", desc = "", response = "";

        private Hashing hash = new();

        protected override void OnInitialized()
        {
            ConnectionInfo info = new();
            ifConnectionSuccessful = info.TryConnection();
            if (ifConnectionSuccessful && userId != "")
            {
                int uId = Convert.ToInt32(userId);
                User? user = new();
                using (var db = new LibraryContext())
                {
                    try {
                        db.Database.CanConnect();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    finally {}
                    try 
                    {
                    user = db.users
                    .Single(user => user.Id == uId);
                    }
                    catch (Exception e)
                    {
                        user = null;
                    }
                }
                if (user is not null)
                {
                    loggedUser = user;
                    isAdmin = user.isAdmin;
                    isLoggedIn = true;
                }
            }
        }
        private void LogIn()
        {
            if (ifConnectionSuccessful == false)
            {
                return;
            }
            List<User> users = new();
            using (var db = new LibraryContext())
                {
                    try {
                        db.Database.CanConnect();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    finally {}
                    users = db.users
                    .ToList();
            }
            
            foreach(var login in users)
            {
                if (login.Username == username)
                {
                    
                    string hashString = hash.GetHash(password, login.salt);
                    if (login.Password == hashString)
                    {
                        isAdmin = login.isAdmin;
                        isLoggedIn = true;
                        loggedUser = login;
                        ShowMessage(ToastType.Success);
                        Logs newLog = new();
                        using (var db = new LibraryContext())
                        {
                            try {
                                db.Database.CanConnect();
                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e.Message);
                                return;
                            }
                            finally {}
                            newLog.Username = login.Username;
                            newLog.IsUserAdmin = login.isAdmin;
                            newLog.OperationsType = Logs.OperationType.UserLogin;
                            db.logs.Add(newLog);
                        }
                    }
                    else
                    {
                        response = "Niepoprawne hasło!";
                        return;
                    }
                }
            }

            response = "Użytkownik o podanych danych nie istnieje!";
            
        }

        private void LogOut()
        {
            username = "";
            password = "";
            isLoggedIn = false;
            userId = "-1";
            ShowMessage(ToastType.Info);
            Navigator.NavigateTo("/account");
        }

        private void AddBook()
        {
            if (title.Length > 0 && author.Length > 0)
            {
                Book ksiazka = new Book(title, author);
                Logs newLog = new Logs();
                if (desc.Length > 0)
                {
                    ksiazka.Description = desc;
                }
                newLog.Username = username;
                newLog.OperationsType = Logs.OperationType.BookAdd;
                using (var db = new LibraryContext())
                {
                    try {
                        db.Database.CanConnect();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    finally {}
                    db.books.Add(ksiazka);
                    db.SaveChanges();
                    db.logs.Add(newLog);
                    db.SaveChanges();
                }
                if (loggedUser is not null)
                    Navigator.NavigateTo("/refresh/" + loggedUser.Id.ToString());
            }
        }

        private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

        private ToastMessage CreateToastMessage(ToastType toastType)
        {
            var toastMessage = new ToastMessage();

            toastMessage.Type = toastType;
            toastMessage.Title = isLoggedIn ? "Zalogowano pomyślnie" : "Wylogowano pomyślnie";
            if (isLoggedIn)
            {
                toastMessage.Message = isAdmin ? "Odblokowano dodawanie książek" : "Miłego wypożyczania! :)";
            }
            else
                toastMessage.Message = "Wróć do nas jak najszybciej!";
            toastMessage.AutoHide = !(toastType == ToastType.Danger || toastType == ToastType.Warning);

            return toastMessage;
        }

        protected void ClearTable()
        {
            Logs newLog = new();
            using (var db = new LibraryContext())
            {
                if (loggedUser is not null)
                {
                    newLog.Username = loggedUser.Username;
                    newLog.IsUserAdmin = loggedUser.isAdmin;
                    newLog.OperationsType = Logs.OperationType.BooksClear;
                    db.logs.Add(newLog);
                }

                db.Database.ExecuteSqlRaw("TRUNCATE TABLE books");
            }

            Navigator.NavigateTo("/browse");
        }

        protected void ClearUsersTable()
        {
            using (var db = new LibraryContext())
            {
                db.Database.ExecuteSqlRaw("TRUNCATE TABLE users CASCADE");
            }

            Navigator.NavigateTo("/");
        }
}


