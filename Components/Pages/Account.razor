@using BlazorBootstrap
@using Microsoft.EntityFrameworkCore
@using ProjektZaliczeniowyPR3.Data
@using ProjektZaliczeniowyPR3.Models
@using ProjektZaliczeniowyPR3.DatabaseConnection

@inject NavigationManager Navigator
@page "/account"
@page "/account/{username}"

<PageTitle>Panel użytkownika</PageTitle>

@if (!isLoggedIn)
{
    <h1>Logowanie</h1>
    <div class = "login_prompt">
        <p>Nazwa użytkownika</p> 
        <input @bind = "username">
        <br/>
        <p>Hasło</p>
        <input @bind = "password">
        <br/>
        <button Color="ButtonColor.Primary" @onclick = "LogIn" style = "button_login">Zaloguj się</button>
        <p>Nie masz konta? <a href="/register">Zarejestruj się!</a></p>
        <p>@response</p>
    </div>

}
else
{
    <div class = "logout_button">
        <button Color="ButtonColor.Primary" @onclick = "LogOut" style = "button_login">Wyloguj się</button>
    </div>
    @if (loggedUser is not null)
    {
        <h2>Witaj @loggedUser.Username!</h2>
    }
    @if (isAdmin)
    {
        <p>Dodaj nową książkę</p>
        <br/>
        <p>Tytuł</p>
        <input @bind = "title">
        <br/>
        <p>Autor</p>
        <input @bind = "author">
        <p>Opis</p>
        <input @bind = "desc">
        <button @onclick = "AddBook">Zapisz</button>
        <br/>
        <button @onclick = "ClearTable">Usuń wszystkie książki</button>
        <br/>
        <button @onclick = "ClearUsersTable">Usuń wszystkich użytkowników</button>
    }
    else
    {
        <p>Wypożycz książki</p>
        @if (loggedUser is not null)
        {
           <BrowseLibrary isLoggedIn = "true" UserId="@loggedUser.Id"></BrowseLibrary>
           <RentedBooks UserId = "@loggedUser.Id" ifConnectionSuccessful = "@ifConnectionSuccessful"></RentedBooks>
        }
    }
}

<div class = "database_status">
    <p>Status połączenia z bazą danych:</p>
    @if (!ifConnectionSuccessful)
    {
        <p style = "color: red"><b>Brak połączenia z bazą danych!</b></p>
    }
    else
    {
        <p style = "color: green"><b>Połączono pomyślnie</b></p>
    }
</div>


@code {
        List<ToastMessage> messages = new List<ToastMessage>();

        User? loggedUser { get; set; } = new();
        private bool isLoggedIn = false;
        private bool isAdmin = false;

        private bool ifConnectionSuccessful = false;

        [Parameter] public string username { get; set;} = "";
        [Parameter] public string password { get; set;} = "";

        string title = "", author = "", desc = "", response = "";

        protected override void OnInitialized()
        {
            ConnectionInfo info = new();
            ifConnectionSuccessful = info.TryConnection();
        }
        private void LogIn()
        {
            if (ifConnectionSuccessful == false)
            {
                return;
            }
            List<User> users = new();
            using (var db = new LibraryContext())
                {
                    try {
                        db.Database.CanConnect();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    finally {}
                    users = db.users
                    .ToList();
            }
            
            foreach(var login in users)
            {
                if (login.Username == username)
                {
                    if (login.Password == password)
                    {
                        isAdmin = login.isAdmin;
                        isLoggedIn = true;
                        loggedUser = login;
                        ShowMessage(ToastType.Success);
                    }
                    else
                    {
                        response = "Niepoprawne hasło!";
                        return;
                    }
                }
            }

            response = "Użytkownik o podanych danych nie istnieje!";
            
        }

        private void LogOut()
        {
            isLoggedIn = false;
        }

        private void AddBook()
        {
            if (title.Length > 0 && author.Length > 0)
            {
                Book ksiazka = new Book(title, author);
                if (desc.Length > 0)
                {
                    ksiazka.Description = desc;
                }

                using (var db = new LibraryContext())
                {
                    try {
                        db.Database.CanConnect();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    finally {}
                    db.books.Add(ksiazka);
                    db.SaveChanges();
                }
            }
        }

        private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

        private ToastMessage CreateToastMessage(ToastType toastType)
        => new ToastMessage
        {
            Type = toastType,
            Title = isLoggedIn ? "Zalogowano pomyślnie" : "Wylogowano pomyślnie",
            Message = isAdmin ? "Odblokowano dodawanie książek" : "Miłego wypożyczania! :)",
        };

        protected void ClearTable()
        {
            using (var db = new LibraryContext())
            {
                db.Database.ExecuteSqlRaw("TRUNCATE TABLE books");
            }

            Navigator.NavigateTo("/browse");
        }

        protected void ClearUsersTable()
        {
            using (var db = new LibraryContext())
            {
                db.Database.ExecuteSqlRaw("TRUNCATE TABLE users CASCADE");
            }

            Navigator.NavigateTo("/");
        }
}