@using BlazorBootstrap
@using Microsoft.EntityFrameworkCore
@using ProjektZaliczeniowyPR3.Data
@using ProjektZaliczeniowyPR3.Models
@using ProjektZaliczeniowyPR3.DatabaseConnection

@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigator

@page "/account"

<PageTitle>Panel użytkownika</PageTitle>
<Toasts class="p-3" Messages="messages" Delay="1000" Placement="ToastsPlacement.TopRight" />
<Modal @ref="modal" />


@if (!isLoggedIn)
{
    <h1>Logowanie</h1>
    <div class = "login_prompt">
        <p>Nazwa użytkownika</p> 
        <input @bind = "username">
        <br/>
        <p>Hasło</p>
        <input @bind = "password">
        <br/>
        <br/>
        <Button Color="ButtonColor.Primary" @onclick = "LogIn" style = "button_login">Zaloguj się</Button>
        <p>Nie masz konta? <a href="/register">Zarejestruj się!</a></p>
        <p>@response</p>
    </div>

}
else
{
    <div class = "logout_button">
        <Button Color="ButtonColor.Primary" @onclick = "LogOut" style = "button_login"><Icon Name = "IconName.Person"></Icon> Wyloguj się</Button>
    </div>
    @if (loggedUser is not null)
    {
        <h2><b>Witaj @loggedUser.Username!</b></h2>
    }
    @if (isAdmin)
    {
        <p>Dodaj nową książkę</p>
        <br/>
        <p>Tytuł</p>
        <input @bind = "title">
        <br/>
        <p>Autor</p>
        <input @bind = "author">
        <p>Opis</p>
        <input @bind = "desc">
        <Button Color="ButtonColor.Success" @onclick = "AddBook"><b><Icon Name = "IconName.Floppy"></Icon> Zapisz</b></Button>
        <br/>
        @if (loggedUser is not null)
        {
            
            <hr class="rounded">
            <p><b>Aby wypożyczyć książkę kliknij na ikonę książki obok jej wpisu.</b></p>
            <BrowseLibrary isLoggedIn = "true" UserId="@loggedUser.Id" showDatabaseInfo = "false"></BrowseLibrary>
            <hr class="rounded">
            <p><b>Aby zwrócić książkę kliknij na ikonę obok jej wpisu.</b></p>
            <RentedBooks UserId = "@loggedUser.Id" ifConnectionSuccessful = "@ifConnectionSuccessful"></RentedBooks>
            <hr class="rounded">
            <p><b>Aby usunąć książkę kliknij na ikonę obok jej wpisu</b></p>
            <RemoveBook UserId = "@loggedUser.Id" ifConnectionSuccessful = "@ifConnectionSuccessful"></RemoveBook>
            <Button Color="ButtonColor.Primary" @onclick = "GoToManager">Menedżer kont</Button> <Button Color="ButtonColor.Danger" @onclick = "ClearTable">Usuń wszystkie książki</Button> <Button Color="ButtonColor.Danger" @onclick = "ClearUsersTable">Usuń wszystkich użytkowników</Button>
        }

    }
    else
    {
        @if (loggedUser is not null)
        {
            <hr class="rounded">
            <p>Aby wypożyczyć książkę kliknij na ikonę książki obok jej wpisu.</p>
            <BrowseLibrary isLoggedIn = "true" UserId="@loggedUser.Id"></BrowseLibrary>
            <hr class="rounded">
            <p><b>Aby zwrócić książkę kliknij na ikonę obok jej wpisu.</b></p>
            <RentedBooks UserId = "@loggedUser.Id" ifConnectionSuccessful = "@ifConnectionSuccessful"></RentedBooks>
        }
    }
}

<div class = "database_status">
    <p>Status połączenia z bazą danych:</p>
    @if (!ifConnectionSuccessful)
    {
        <p style = "color: red"><b>Brak połączenia z bazą danych!</b></p>
    }
    else
    {
        <p style = "color: green"><b>Połączono pomyślnie</b></p>
    }
</div>


@code {
        private Modal modal = default!;
        List<ToastMessage> messages = new List<ToastMessage>();

        User loggedUser { get; set; } = new();
        
        User notLogged = new();
        
        private bool isLoggedIn = false;
        private bool isAdmin = false;
        private bool ifConnectionSuccessful = false;

        [Parameter] public string username { get; set;} = "";
        [Parameter] public string password { get; set;} = "";

        [Parameter] public string userId { get; set; } = "";

        public int Id {get; set;} = -1;

        string title = "", author = "", desc = "", response = "";

        private Hashing hash = new();

        protected override void OnInitialized()
        {
            notLogged.Id = -1;
            ConnectionInfo info = new();
            ifConnectionSuccessful = info.TryConnection();
        }

        protected override async Task OnAfterRenderAsync(bool ifFirstRender)
        {
            if (ifFirstRender)
            {
                var result = await ProtectedSessionStore.GetAsync<int>("uId");
                Id = result.Success ? result.Value : -1;
                if (Id != -1)
                {
                    if (ifConnectionSuccessful)
                    {
                        using (var db = new LibraryContext())
                        {
                            loggedUser = db.users
                            .Single(loggedUser => loggedUser.Id == Id);
                            isLoggedIn = true;
                            isAdmin = loggedUser.isAdmin;
                        }
                    }
                    StateHasChanged();
                }
            }
        } 

        private void GoToManager()
        {
            if (loggedUser is not null)
                Navigator.NavigateTo("/accountmanager/");
        }

        private List<User> ListUsers()
        {
            List<User> users = new();
            using (var db = new LibraryContext())
                {
                    try {
                        db.Database.CanConnect();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    finally {}
                    users = db.users
                    .ToList();
            }
            return users;
        }

        private async void SetLoginParameters(User login)
        {
            await ProtectedSessionStore.SetAsync("uId", login.Id);
            isAdmin = login.isAdmin;
            isLoggedIn = true;
            loggedUser = login;
        }

        private void GenerateLoginLog(User login)
        {
            Logs newLog = new();
            using (var db = new LibraryContext())
            {
                try {
                    db.Database.CanConnect();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    return;
                }
                finally {}
                newLog.Username = login.Username;
                newLog.IsUserAdmin = login.isAdmin;
                newLog.OperationsType = Logs.OperationType.UserLogin;
                db.logs.Add(newLog);
            }
        }
        private async void LogIn()
        {
            if (loggedUser is not null)
            {
                isLoggedIn = true;
            }
            if (ifConnectionSuccessful == false)
            {
                return;
            }
            List<User> users = ListUsers();
            
            foreach(var login in users)
            {
                if (login.Username == username)
                {
                    
                    string hashString = hash.GetHash(password, login.salt);
                    if (login.Password == hashString)
                    {
                        SetLoginParameters(login);
                        await ProtectedSessionStore.SetAsync("uId", login.Id);
                        ShowMessage(ToastType.Success);
                        GenerateLoginLog(login);
                    }
                    else
                    {
                        response = "Niepoprawne hasło!";
                        return;
                    }
                }
            }

            response = "Użytkownik o podanych danych nie istnieje!";
            
        }

        private async void ClearInput()
        {
            await ProtectedSessionStore.SetAsync("uId", -1);
            username = "";
            password = "";
            isLoggedIn = false;
            userId = "-1";
        }

        private void LogOut()
        {
            ClearInput();
            ShowMessage(ToastType.Info);
            Navigator.NavigateTo("/");
        }

        private async void GenerateAddBookLog()
        {
            if (ifConnectionSuccessful)
            {
                Logs newLog = new Logs();
                newLog.Username = username;
                newLog.OperationsType = Logs.OperationType.BookAdd;
                using (var db = new LibraryContext())
                {
                    db.logs.Add(newLog);
                    await db.SaveChangesAsync();
                }
            }
        }

        private Book? CreateBook()
        {
            if (title.Length > 0 && author.Length > 0)
            {
                Book newBook = new Book(title, author);
                if (desc.Length > 0)
                    newBook.Description = desc;
                return newBook;
            }
            return null;
        }

        private async void InsertBookIntoDb(Book newBook)
        {
            using (var db = new LibraryContext())
                {
                try {
                    db.Database.CanConnect();
                }
                catch (Exception e)
                {
                    return;
                }
                finally {}
                db.books.Add(newBook);
                await db.SaveChangesAsync();
            }
        }
        private void AddBook()
        {
            Book? newBook = CreateBook();
            if (newBook is null)
                return;
            InsertBookIntoDb(newBook);
            GenerateAddBookLog();
            if (loggedUser is not null)
                Navigator.NavigateTo("/refresh/");
        }

        private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

        private ToastMessage CreateToastMessage(ToastType toastType)
        {
            var toastMessage = new ToastMessage();

            toastMessage.Type = toastType;
            toastMessage.Title = isLoggedIn ? "Zalogowano pomyślnie" : "Wylogowano pomyślnie";
            if (isLoggedIn)
            {
                toastMessage.Message = isAdmin ? "Odblokowano dodawanie książek" : "Miłego wypożyczania! :)";
            }
            else
                toastMessage.Message = "Wróć do nas jak najszybciej!";
            toastMessage.AutoHide = !(toastType == ToastType.Danger || toastType == ToastType.Warning);

            return toastMessage;
        }

        protected void GenerateClearTableLog()
        {
            using (var db = new LibraryContext())
            {
                Logs newLog = new();
                if (loggedUser is not null)
                {
                    newLog.Username = loggedUser.Username;
                    newLog.IsUserAdmin = loggedUser.isAdmin;
                    newLog.OperationsType = Logs.OperationType.BooksClear;
                    db.logs.Add(newLog);
                }

            }
        }

        protected void Refresh()
        {
            Navigator.NavigateTo("/refresh");
        }
        protected async Task ClearTable()
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("Mode", 2);
            await modal.ShowAsync<Confirmation>(title: "Czyszczenie bazy danych", parameters: parameters);
            StateHasChanged();
            Navigator.NavigateTo("/account");
        }

        protected async Task ClearUsersTable()
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("Mode", 1);
            await modal.ShowAsync<Confirmation>(title: "Czyszczenie bazy danych", parameters: parameters);
            StateHasChanged();
            Navigator.NavigateTo("/");
        }
}


