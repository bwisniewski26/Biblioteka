

@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigator

@page "/account"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using ProjektZaliczeniowyPR3.Objects

<PageTitle>Panel użytkownika</PageTitle>
<Toasts class="p-3" Messages="_toastMessages" Delay="1000" Placement="ToastsPlacement.TopRight" />
<Modal @ref="_modal" />


@if (!_isLoggedIn)
{
    <h1>Logowanie</h1>
    <div class = "login_prompt">
        <p>Nazwa użytkownika</p> 
        <input @bind = "Username">
        <br/>
        <p>Hasło</p>
        <input type = "password" @bind = "Password">
        <br/>
        <br/>
        <Button Color="ButtonColor.Primary" @onclick = "LogIn">Zaloguj się</Button>
        <p>Nie masz konta? <a href="/register">Zarejestruj się!</a></p>
        <p style = "color: red;">@Response</p>
    </div>

}
else
{
    <div class = "logout_button">
        <Button Color="ButtonColor.Primary" @onclick = "LogOut"><Icon Name = "IconName.Person"></Icon> Wyloguj się</Button>
    </div>
    
    <h2><b>Witaj @LoggedUser.Username!</b></h2>
    
    @if (_isAdmin)
    {
        <p>Dodaj nową książkę</p>
        <br/>
        <p>Tytuł</p>
        <input @bind = "_newBook.Title">
        <br/>
        <p>Autor</p>
        <input @bind = "_newBook.Author">
        <p>Opis</p>
        <input @bind = "_newBook.Description">
        <Button Color="ButtonColor.Success" @onclick = "AddBook"><b><Icon Name = "IconName.Floppy"></Icon> Zapisz</b></Button>
        <br/>
            
            <hr class="rounded">
            <p><b>Aby wypożyczyć książkę kliknij na ikonę książki obok jej wpisu.</b></p>
            <BrowseLibrary isLoggedIn = "true" UserId="@LoggedUser.Id" showDatabaseInfo = "false"></BrowseLibrary>
            <hr class="rounded">
            <p><b>Aby zwrócić książkę kliknij na ikonę obok jej wpisu.</b></p>
            <RentedBooks UserId = "@LoggedUser.Id" ifConnectionSuccessful = "@_connectionSuccessful"></RentedBooks>
            <hr class="rounded">
            <p><b>Aby usunąć książkę kliknij na ikonę obok jej wpisu</b></p>
            <RemoveBook UserId = "@LoggedUser.Id" ifConnectionSuccessful = "@_connectionSuccessful"></RemoveBook>
            <Button Color="ButtonColor.Primary" @onclick = "GoToManager">Menedżer kont</Button> <Button Color="ButtonColor.Danger" @onclick = "ClearTable">Usuń wszystkie książki</Button> <Button Color="ButtonColor.Danger" @onclick = "ClearUsersTable">Usuń wszystkich użytkowników</Button>
        

    }
    else
    {
            <hr class="rounded">
            <p>Aby wypożyczyć książkę kliknij na ikonę książki obok jej wpisu.</p>
            <BrowseLibrary isLoggedIn = "true" UserId="@LoggedUser.Id"></BrowseLibrary>
            <hr class="rounded">
            <p><b>Aby zwrócić książkę kliknij na ikonę obok jej wpisu.</b></p> 
            <RentedBooks UserId = "@LoggedUser.Id" ifConnectionSuccessful = "@_connectionSuccessful"></RentedBooks>
    }
}

<div class = "database_status">
    <p>Status połączenia z bazą danych:</p>
    @if (!_connectionSuccessful)
    {
        <p style = "color: red"><b>Brak połączenia z bazą danych!</b></p>
    }
    else
    {
        <p style = "color: green"><b>Połączono pomyślnie</b></p>
    }
</div>


@code {
        private Modal _modal = default!;
        List<ToastMessage> _toastMessages = new List<ToastMessage>();

        User LoggedUser { get; set; } = new();
        
        private bool _isLoggedIn, _isAdmin, _connectionSuccessful;

        protected string Username { get; set;} = "";
        protected string Password { get; set;} = "";

        protected string UserId { get; set; } = "";

        public int Id {get; set;} = -1;

        Book _newBook = new();

        private Hashing _hashing = new();

        private string Response { get; set; } = "";
        Tables table = new();

        protected override void OnInitialized()
        {
            ConnectionInfo info = new();
            _connectionSuccessful = info.TryConnection();
        }

        protected override async Task OnAfterRenderAsync(bool ifFirstRender)
        {
            if (ifFirstRender)
            {
                var result = await ProtectedSessionStore.GetAsync<int>("uId");
                Id = result.Success ? result.Value : -1;
                if (Id != -1)
                {
                    LoggedUser = table.RetrieveUserById(Id);
                    if (LoggedUser.Id != -1)
                    {
                        _isLoggedIn = true;
                        _isAdmin = LoggedUser.isAdmin;
                    }
                    StateHasChanged();
                }
            }
        } 

        private void GoToManager()
        {
            Navigator.NavigateTo("/accountmanager/");
        }

        private List<User> ListUsers()
        {
            List<User> users;
            using (var db = new LibraryContext())
                {
                    try {
                        db.Database.CanConnect();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    users = db.users
                    .ToList();
            }
            return users;
        }

        private async void SetLoginParameters(User login)
        {
            await ProtectedSessionStore.SetAsync("uId", login.Id);
            _isAdmin = login.isAdmin;
            _isLoggedIn = true;
            LoggedUser = login;
        }

        private void GenerateLoginLog(User login)
        {
            Logs newLog = new();
            using (var db = new LibraryContext())
            {
                try {
                    db.Database.CanConnect();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    return;
                }
                newLog.Username = login.Username;
                newLog.IsUserAdmin = login.isAdmin;
                newLog.OperationsType = Logs.OperationType.UserLogin;
                db.logs.Add(newLog);
            }
        }
        private void LogIn()
        {
            
            Authentication authentication = new();
            User loggedUser = new();
            LoginStatus status = new();
            status = authentication.Login(Username, Password);

            if (status != LoginStatus.UserNotFound)
                loggedUser = authentication.RetrieveUserInformation(Username);
            
            switch (status)
            {
                case (LoginStatus.UserNotFound):
                    Response = "Nie odnaleziono takiej osoby!";
                    StateHasChanged();
                    break;   
                case (LoginStatus.LoginSuccessful):
                    SetLoginParameters(loggedUser);
                    Navigator.NavigateTo("/account");
                    break;
                case (LoginStatus.ConnectionFailed):
                    Response = "Błąd połączenia z bazą danych!";
                    StateHasChanged();
                    break;
                case(LoginStatus.PasswordIncorrect):
                    Response = "Błędne hasło!";
                    StateHasChanged();
                    break;
            }
        }

        private async void ClearInput()
        {
            await ProtectedSessionStore.SetAsync("uId", -1);
            Username = "";
            Password = "";
            _isLoggedIn = false;
            UserId = "-1";
        }

        private void LogOut()
        {
            ClearInput();
            ShowMessage(ToastType.Info);
            Navigator.NavigateTo("/");
        }

        private async void GenerateAddBookLog()
        {
            if (_connectionSuccessful)
            {
                Logs newLog = new Logs();
                newLog.Username = Username;
                newLog.OperationsType = Logs.OperationType.BookAdd;
                using (var db = new LibraryContext())
                {
                    db.logs.Add(newLog);
                    await db.SaveChangesAsync();
                }
            }
        }

        private async void InsertBookIntoDb(Book newBook)
        {
            if (_newBook.Author.Length > 0 && _newBook.Title.Length > 0)
            {
                newBook.InsertBook();
            }
        }
        
        private void AddBook()
        {
            InsertBookIntoDb(_newBook);
            GenerateAddBookLog();
            Navigator.NavigateTo("/refresh/");
        }

        private void ShowMessage(ToastType toastType) => _toastMessages.Add(CreateToastMessage(toastType));
        

        private ToastMessage CreateToastMessage(ToastType toastType)
        {
            var toastMessage = new ToastMessage
            {
                Type = toastType,
                Title = _isLoggedIn ? "Zalogowano pomyślnie" : "Wylogowano pomyślnie"
            };

            if (_isLoggedIn)
            {
                toastMessage.Message = _isAdmin ? "Odblokowano dodawanie książek" : "Miłego wypożyczania! :)";
            }
            else
                toastMessage.Message = "Wróć do nas jak najszybciej!";
            toastMessage.AutoHide = !(toastType == ToastType.Danger || toastType == ToastType.Warning);

            return toastMessage;
        }

        protected void GenerateClearTableLog()
        {
            using (var db = new LibraryContext())
            {
                Logs newLog = new();
                newLog.Username = LoggedUser.Username;
                newLog.IsUserAdmin = LoggedUser.isAdmin;
                newLog.OperationsType = Logs.OperationType.BooksClear;
                db.logs.Add(newLog);

            }
        }

        protected void Refresh()
        {
            Navigator.NavigateTo("/refresh");
        }
        protected async Task ClearTable()
        {
            GenerateClearTableLog();
            var parameters = new Dictionary<string, object>();
            parameters.Add("Mode", 2);
            await _modal.ShowAsync<Confirmation>(title: "Czyszczenie bazy danych", parameters: parameters);
            StateHasChanged();
            Navigator.NavigateTo("/account");
        }

        protected async Task ClearUsersTable()
        {
            GenerateClearTableLog();
            var parameters = new Dictionary<string, object>();
            parameters.Add("Mode", 1);
            await _modal.ShowAsync<Confirmation>(title: "Czyszczenie bazy danych", parameters: parameters);
            StateHasChanged();
            Navigator.NavigateTo("/");
        }
}


