@page "/register"

@using ProjektZaliczeniowyPR3.Data
@using ProjektZaliczeniowyPR3.DatabaseConnection
@using ProjektZaliczeniowyPR3.Models

@inject NavigationManager Navigator
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Nowe konto</PageTitle>
<h1>Nowe konto</h1><br/>
<div class = "register_prompt">
    <p>Nazwa użytkownika</p>
    <input @bind = "username">
    <br/>
    <p>Hasło</p>
    <input type = "password" @bind = "password">
    <p>Czy użytkownik jest administratorem? <input type = "checkbox" @bind = "isAdmin"></p>
    <div class = "register_button">
        <Button Color="ButtonColor.Primary" @onclick = "AddUser"><b><Icon Name = "IconName.PersonAdd"></Icon> Zarejestruj się</b></Button>
    </div>
</div>

@if (displayErrorMessages)
{
<div class = "error_message" style = "color: red; text-align: center;">
    @if (username.Length == 0)
    {
        @errorMessages[0]
    }
    @if (password.Length  == 0)
    {
        @errorMessages[1]
    }
    @if (userExists)
    {
        @errorMessages[2]
    }
</div>
}



<div class = "database_status">
    <p>Status połączenia z bazą danych:</p>
    @if (!ifConnectionSuccessful)
    {
        <p style = "color: red"><b>Brak połączenia z bazą danych!</b></p>
    }
    else
    {
        <p style = "color: green"><b>Połączono pomyślnie</b></p>
    }
</div>

@code {

    string username = "", password = "";
    private Hashing hash = new();
    private bool isAdmin, ifConnectionSuccessful, displayErrorMessages, userExists;
    List<ToastMessage> messages = new List<ToastMessage>();

    string[] errorMessages = ["Nie podano loginu!", "Nie podano hasła!", "Użytkownik o podanej nazwie istnieje!"];

    protected override void OnInitialized()
    {
        ConnectionInfo info = new();
        ifConnectionSuccessful = info.TryConnection();
    }

    private async void CreateAddUserLog()
    {
        Logs newLog = new();
        newLog.Username = username;
        newLog.OperationsType = Logs.OperationType.UserRegister;
        if (ifConnectionSuccessful)
        {
            using (var db = new LibraryContext())
            {
                db.logs.Add(newLog);
                await db.SaveChangesAsync();
            }
        }
    }

    private User CreateUser()
    {
        User newUser = new();
        newUser.Username = username;
        newUser.Password = password;
        newUser.salt = hash.GetSalt();
        newUser.Password = hash.GetHash(password, newUser.salt);
        newUser.isAdmin = isAdmin;
        return newUser;
    }

    private List<User> ListUsers()
    {
        List<User> users = new();
        using (var db = new LibraryContext())
        {
            try {
                db.Database.CanConnect();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            finally {}
            users = db.users
            .ToList();
        }
        return users;
    }

    protected bool DoesUserExist()
    {
        List <User> users = ListUsers();
        foreach (var user in users)
        {
            if (user.Username == username)
            {
                displayErrorMessages = true;
                userExists = true;
                StateHasChanged();
                return true;
            }
        }
        return false;
    }
    

    protected async void AddUser()
    {
        displayErrorMessages = false;
        
        if (username.Length == 0 || password.Length == 0)
        {
            displayErrorMessages = true;
            return;
        }
        
        User newUser = CreateUser();
        
        userExists = DoesUserExist();

        if (userExists)
            return;

        newUser.AddUser();
        
        CreateAddUserLog();
        await ProtectedSessionStore.SetAsync("uId", -1);
        Navigator.NavigateTo("/account");
    }
        private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

        private ToastMessage CreateToastMessage(ToastType toastType)
        {
            var toastMessage = new ToastMessage();

            toastMessage.Type = toastType;
            toastMessage.Title = "Zarejestrowano pomyślnie!";
            toastMessage.Message = "Możesz zalogować się teraz przy użyciu podanych danych";
            toastMessage.AutoHide = !(toastType == ToastType.Danger || toastType == ToastType.Warning);

            return toastMessage;
        }


}

